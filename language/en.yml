nav:
  home: "Home"
  imprint: "Imprint"
  sponsors: "Sponsors"
  contributors: "Contributors"
  support: "Support"
  contributing: "Contributing"
  license: "License"
  autowiring: "Autowiring"
  middlewares: "Middlewares"
  results: "Results"
  usage: "Usage"
  logging: "Logging"
  storage: "Storage"
  routes: "Routes"
  quick-start: "Quick Start"
  faq: "FAQ"
  code-of-conduct: "Code of Conduct"

socials:
  npm:
    title0: "@idrinth/api-bench on NPMJS"
    text0: "@idrinth/api-bench"
    title1: "@idrinth/api-bench-cli on NPMJS"
    text1: "@idrinth/api-bench-cli"
    alt: "NPM"
  docker:
    title0: "idrinth/api-bench-gitlab-runner on DockerHub"
    text0: "Gitlab Runner"
    title1: "idrinth/api-bench-gitea-action on DockerHub"
    text1: "Gitea Action"
    title2: "idrinth/api-bench on DockerHub"
    text2: "Pure Alpine"
    title3: "idrinth/api-bench-history-microservice on DockerHub"
    text3: "History Microservice"
    title4: "idrinth/api-bench-history-website on DockerHub"
    text4: "History Website"
    alt: "DockerHub"
  github:
    title: "idrinth/api-bench on GitHub"
    alt: "GitHub"
  medium:
    title: "idrinth/api-bench on Medium"
    alt: "Medium"
  youtube:
    title: "idrinth-api-bench on YouTube"
    alt: "YouTube"
  slack:
    title: "@idrinth/api-bench on slack"
    alt: "Slack"
  linkedin:
    title: "@idrinth/api-bench on LinkedIn"
    alt: "LinkedIn"
  open-sauced:
    title: "@idrinth/api-bench projects on OpenSauced"
    alt: "OpenSauced"
  reddit:
    title: "@idrinth/api-bench on Reddit"
    alt: "Reddit"

code-of-conduct:
  meta:
    title: "Code of Conduct"
    description: "The Contributor's Code of Conduct for @idrinth/api-bench"

home:
  meta:
    title: "Home"
    description: "Welcome to the documentation for the framework @idrinth/api-bench"
  title: "What does this project do?"
  what: "This project provides an API performance measuring and monitoring framework, that strives to provide the best developer experience possible while keeping it easy to expand and configure."
  why: "This helps to detect performance changes in code in a quick and simple manner."
  demo:
    youtube: "Version 2.7.4 Demo"
  benchmark:
    title: "Why use a Benchmark Runner?"
    microservices: "Given that the amount of APIs increase by moving to microservices, we need a way to determine if changes to a service's response times are related to code changes."
    purpose: "For this purpose a defined load with repeatable requests with a medium amount of checks seems the most useful."
  load-test:
    title: "Why use a Load Test Runner?"
    microservices: "For planning and scaling purposes, we need to know how many users we can handle with a given amount of microservice instances."
    purpose: "For this purpose a defined growing load with repeatable requests with few checks seems the most useful."
  content-test:
    title: "Why use a Content Test Runner?"
    microservices: "With the amount of APIs skyrocketing, the need to test them quickly and with as little effort as possible is required."
    purpose: "For this purpose repeatable requests with many checks seems the most useful."
  libraries:
    title: "Regarding existing libraries"
    description: "Other tools are all either untouched for quite a while and don't provide type definitions for typescript. This makes them less desirable when working with projects where the better static code check is a huge boost in development speed."
    reusability: "A huge benefit of using this framework is writing route definitions once and reusing them across all desired test types."
    threading: "Additionally, this tool separates the validation thread from the thread processing the actual requests to further minimise the effect of complicated validations or huge response bodies on the data gathering."

youtube:
  on: "See video on YouTube"
  content: "Watch more about this"
  player: "YouTube Video Player"

faq:
  meta:
    title: "FAQ"
    description: "frequently asked questions about @idrinth/api-bench"
  title: "Frequently Asked Questions"
  description: "If your question is not yet answered, head over to slack, LinkedIn or GitHub and leave it there. We will address it as quickly as possible."
  questions:
    title_1: "What is benchmarking?"
    description_1: "Benchmarking is the process of measuring software performance against established best practices."
    title_2: "What is load testing?"
    description_2: "Load testing evaluates system behaviour under peak or anticipated load conditions."
    title_3: "How long does it take to write a test?"
    description_3: "The average time to write a test is 2-3 minutes. For beginners, it is about 15 minutes."
    title_4: "How long does it take to setup?"
    description_4: "By following the Quick Start, it only takes a few minutes!"
    title_5: "Is the project in productive use?"
    description_5: "Yes, it has been for most of it's lifetime."
    title_6: "Is there any additional schooling material available?"
    description_6: "Not yet, it's actively being worked on."
    title_7: "Is the framework free to use?"
    description_7: "Yes, entirely. Even support via GitHub is free."
    title_8: "How fast is the public support?"
    description_8: "We strive to react within 24 hours and latest within 48 hours."

imprint:
  meta:
    title: "Imprint"
    description: "Imprint and privacy statements for this website"

sponsors:
  meta:
    title: "Sponsors | Contributing"
    description: "The following businesses and companies are sponsoring the development of api-bench by providing time, money or necessary tools."
  title: "Sponsors"
  description: "The following businesses and companies support the development of @idrinth/api-bench. This means they provide time, money or necessary tools for the development."
  bjoernbuettner:
    intro: "Björn Büttner is a Germany based business, that provides custom development and hosting services in a web context. Additionally to that some training and consulting are offered, that do include this project for performance monitoring."
    sponsoring: "The business supports the project by hosting this documentation site for free and supplying the domain."
  jungwild:
    intro: "jungwild is a Germany based recruiting agency, that uses the framework for testing their own APIs."
    sponsoring: "The agency provides some time for testing and developing changes of the framework before release."

contributors:
  meta:
    title: "Contributors | Contributing"
    description: "These are the people who made the site and framework what they are today."
  title: "Contributors"
  description: "A big thank you to everyone who contributed. Below are the ones who contributed code, but other contributions are as valuable."
  code_contributors: "Code Contributors"
  none_code_contributors: "None Code Contributors"

support:
  meta:
    title: "Support"
    description: "Support options for the @idrinth/api-bench framework."
  title: "Support"
  description: "No matter who you are, you can get support via GitHub issues and discussions. Support reaction times depend on the availability of volunteers, so it may take a day or two."
  commercial:
    title: "Commercial support"
    description: "If your closed source software needs support, that can't be handled via the above means, Björn Büttner also provides payed support on a business basis. You can reach the business via:"
  training:
    title: "Professional Training"
    description: "Training is provided by Björn Büttner on a business basis for organisations. For pricing and scheduling contact the business at:"

404:
  meta:
    title: "404 NOT FOUND"
    description: "The page you desired has not been found"
  title: "404 Not Found"
  description: "Sadly the URL you entered couldn't be found."

contributing:
  meta:
    title: "Contributing"
    description: "Contribution guidelines for the framework @idrinth/api-bench"
  title: "Contributing Guidelines"
  description: "Any and all contributions are encouraged."
  youtube: "Structure Overview on YouTube"
  structure:
    title: "Structure"
    description: "The project is a mono-repo grouped into multiple subprojects, for example documentation-website, framework, history-microservice, CLI, mindmap, history-website. You can find more detailed instructions for the specific part in the corresponding folder's readme."
  issues:
    title: "Issues"
    description: "Any idea and bug report is considered a contribution. Not only do they help improving the code base, they help other people to get more use out of this framework. Please try to stick to the format of predefined issue types to make it easier to filter and handle for anyone interested in the topic."
  code:
    title: "Code"
    style: "The style guidelines are provided via eslint. Please try to optimise code for readability, since code will be read way more often than it will be changed."
    breaking: "While adding functionality, keep in mind to break existing interfaces, entry points and functionality only if absolutely necessary."
    picking:
      title: "Picking the right issue"
      labels: "Issues that are good for relatively new coders are marked as `Good first issue`, issues marked as `help wanted` require a bit more knowledge about the project."
      project: "Within an issue, you find the project information on the right-hand side, opening them up will reveal further estimates about size, difficulty, priority and main affected project part"
    workflow:
      title: "Contribution workflow"
      list_item_1: "fork the repository"
      list_item_2: "mention in the issue, that you are working on it (it will be assigned for a few weeks then)"
      list_item_3: "create a feature branch (issue-xxx-does-something) from the-one"
      list_item_4: "create a draft pull request"
      list_item_5: "mention fixes #xxx in the description"
      list_item_6: "make your changes to the branch"
      list_item_7: "check if actions are all green"
      list_item_8: "mark as ready to review"
      list_item_9: "get changes reviewed"
      list_item_10: "if review is positive get changes merged otherwise fix and the send back to review"
    translation:
      title: "Translation"
      setup: "If you'd like to test translations, there's an auto-rebuild in the project root:"
      path: "Languages can be found in their respective project folder."
      example: "Example:"
      youtube: "Translation YouTube tutorial"
    mindmap:
      title: "Mindmap"
      youtube: "Short Mindmap YouTube Tutorial"
      introduction: "Contributing to the mindmap is encouraged. The mindmap is built from data.yml in /mindmap and follows the following schema:"
      nodes: "In order to display nodes, they must have a text property. They may also have; a URL, description, and child nodes."
    tests:
      title: "Tests"
      description: "Testing new code is expected and adding tests or improving tests for old code is appreciated. The goal is to find most issues by either static analysis or unit and integration tests."
      manual:
        title: "Manual Tests"
        description: "For manual testing you can run 'npm run coai' in the source folder to automatically check out and install all required files for testing."
      locally:
        title: "Running Tests Locally"
        description: "To see a list of available CI tasks and their corresponding commands to run them locally, you can run 'npm run local' in the source folder. This is particularly useful for testing specific CI tasks before committing your changes."
    naming:
      title: "Naming conventions"
      list_item_1: "camelCase for variables and functions"
      list_item_2: "UPPER_SNAKE_CASE for constants"
      list_item_3: "PascalCase for interfaces and classes"
      list_item_4: "kebab-case for file names"
    requirements:
      title: "Requirements"
      node: "One of the last two node versions is required."
      os:  "Supported Operating Systems: Linux, Windows, and macOS."
    setup:
      title: "Setup"
      description: "Run the following commands to create the full project:"
    commits:
      title: "Commit Message Guidelines"
      preface: "*This specification is inspired by Angular commit messages guidelines."
      introduction: "These are the rules for how Git commit messages for api-bench should be formatted. This format leads to easier to read commit history."
      parts: "Each commit message consists of a header, a body, and a footer."
      header:
        title: "Commit Message Header"
        format: "Headers must adhere to the following format:"
        description: "The header is mandatory and should conform to the Commit Message Header format."
        type:
          title: "Type"
          description: "The list of supported types:"
          list_item_1: "build: Changes that affect the build system or external dependencies"
          list_item_2: "ci: Changes to CI configuration files and scripts"
          list_item_3: "docs: Documentation changes"
          list_item_4: "feature: A new feature"
          list_item_5: "fix: A bug fix"
          list_item_6: "perf: A code change that improves performance"
          list_item_7: "refactor: A code change that neither fixes a bug nor adds a feature"
          list_item_8: "test: Adding missing tests or correcting existing tests"
        scope:
          title: "Scope"
          description: "The scope should be the name of the affected part of the project. The list of supported scopes:"
          list_item_1: "framework"
          list_item_2: "website"
          list_item_3: "history-microservice"
          list_item_4: "history-website"
          list_item_5: "dockerfiles"
          list_item_6: "examples"
        summary:
          title: "Summary"
          description: "The summary field should provide a succinct description of the change."
          list_item_1: "use the imperative, present tense"
          list_item_2: "don't capitalise the first letter"
          list_item_3: "no dot (.) at the end"
      body:
        title: "Commit Message Body"
        description: "The body is mandatory for all commits. They should conform to the Commit Message Body format."
        content: "The commit message body should explain *why* you are making the change. You can include a comparison of the previous behaviour with the new behaviour in order to illustrate the impact of the change."
        time: "Just as in the summary, use the imperative, present tense."
      footer:
        title: "Commit Message Footer"
        description: "The footer is optional. The Commit Message Footer format describes what the footer is used for and the structure it must have."
        content: "The footer can contain information about breaking changes and deprecations and is also the place to reference GitHub issues and other pull requests that this commit closes or is related to."
        breaking: "In case of breaking changes and deprecations the section should start with the phrase 'BREAKING CHANGE:' or 'DEPRECATED: ' respectively followed by a description. For example:"
      complete:
        title: "Complete Commit"
        description: "Here' a complete example of a correct commit message:"
      reverts:
        title: "Revert commits"
        description: "If the commit reverts a previous commit, it should begin with 'revert:', followed by the header of the reverted commit."
        content: "The content of the commit message body should contain:"
        list_item_1: "ID of the commit being reverted in the following format: `This reverts commit <SHA>`"
        list_item_2: "a clear description of the reason for reverting the commit message."
    pull_requests:
      title: "Pull Requests"
      description: "Please open your pull requests in draft mode. When ready to review remove the draft. Do not force-push, it just creates additional work."
  documentation:
    title: "Documentation"
    description: "Documentation is an underrated part of every software. Adding any kind of clarification, example or improvement is highly appreciated and encouraged. The ones writing the documentation are the unsung heroes of open and closed source software."
  examples:
    title: "Examples"
    description: "For examples, please keep in mind, that we don't want to overload any API. Don't use high load tasks, don't use APIs that are not for public use. Examples are expected to run without damaging anyone, including third parties."
license:
  meta:
    title: "License"
    description: "The framework @idrinth/api-bench is available under the MIT license"

autowiring:
  meta:
    title: "Autowiring | Usage"
    description: "The framework @idrinth/api-bench can autowire environment variables into route definitions"
  title: "Autowiring Route Parameters"
  limitations: "Comment types will always win over default value types. If those two don't match, you might get weird results. Sadly, a few things can't be done."
  conversion: "Types will be automatically applied if there is either a default value to get the type from or a comment like /* boolean */ parameter added in front of the parameter."
  parameters: "Parameters of contained functions will be filled with environment variable values of the respective name (aBc -> A_BC)."
  limitation:
    title: "Limitations"
    constants: "Do not use constants for their default values, they can't be properly analysed and will throw an Error."
    objects: "Do not use arrays or objects as default values, they can't be autowired."
    destructuring: "Destructuring is not supported."
    mixed: "Default value types NOT of the same type as the parameter."
  example:
    title: "Example"
    description: "Here we autowire three environment variables as string to make the route easy to reuse."

middlewares:
  meta:
    title: "Middlewares | Usage"
    description: "The framework @idrinth/api-bench provides default middlewares and allows for custom middlewares"
  title: "Middlewares"
  description: "Middlewares use an absolute file path to be loaded. The following characters will be used to expand short forms:"
  provided:
    title: "Provided Middlewares"
    pre: "Preparation step"
    post: "Postprocessing and validation step"
    encoding:
      title: "JSON and form encode"
      description: "This middleware encodes request bodies automatically and sets the appropriate header."
      pre: "Here the encoding property on the route gets processed."
      post: "This is a noop, so no functionality."
    access:
      title: "access token handling"
      description: "This handles bearer tokens, including JWTs retrieval and setting in common response structured."
      pre: "Adds an access token if it's available as Bearer Token."
      post: "Tries to retrieve an access token from a JSON response. It has multiple fallbacks to cover common naming schemes."
    csrf:
      title: "csrf-header handling"
      description: "This middleware handles cross site request forgery tokens build in common manners."
      pre: "This will add a CSRF header if any data for it has been retrieved."
      post: "This will try to retrieve a new CSRF token from the response. It may not catch all, since implementations vary widely."
    2xx:
      title: "status 2xx check"
      description: "This is a validator for the HTTP status code."
      pre: "This is a noop, so no functionality."
      post: "This will fail if the status code of the response is less than 200 or bigger than 299."
    403:
      title: "status 403 check"
      description: "This is a validator for the HTTP status code."
      pre: "This is a noop, so no functionality."
      post: "This will fail if the status code of the response is different from 403."
    404:
      title: "status 404 check"
      description: "This is a validator for the HTTP status code."
      pre: "This is a noop, so no functionality."
      post: "This will fail if the status code of the response is different from 404."
    user-agent:
      title: "user-agent"
      description: "This sets a sensible user agent string, so it can easily be filtered out for logging."
      pre: "The user agent string will be added, based on the used versions of the project and the framework."
      post: "This is a noop, so no functionality."
    cookies:
      title: "cookies"
      description: ""
      pre: ""
      post: ""
    json:
      title: "json-validator"
      description: ""
      pre: "This is a noop, so no functionality."
      post: ""
    xml:
      title: "xml-validator"
      description: ""
      pre: "This is a noop, so no functionality."
      post: ""
    silent-server-validator:
      title: "silent-server-validator"
      description: ""
      pre: "This is a noop, so no functionality."
      post: ""
    success-check:
      title: "check response for success"
      description: ""
      pre: "This is a noop, so no functionality."
      post: ""
    failure-check:
      title: "check response for failure"
      description: ""
      pre: "This is a noop, so no functionality."
      post: ""
  custom:
    title: "Custom Middleware"
    description: "For custom middleware, implement the following interface. Prepare is called before sending a request, process after a request. If an error is thrown in process, any further validations are skipped."

results:
  meta:
    title: "Results | Usage"
    description: "The framework @idrinth/api-bench provides default result handlers and allows for additional custom result handlers"
  title: "Results"
  description: "By default, all possible result formats are provided. The files are created in the application root, but that can be overwritten programmatically."
  csv:
    description: "This provides a file, that can easily opened by excel or handled programmatically."
  html:
    description: "This provides a simple HTML file, that could be sent by email for example."
  cli:
    description: "This provides a small table in the command line, that shows most of the data."
  json:
    description: "This provides a file easily handled via other software. By default, it is not formatted for readability."
  xray:
    title: "XRay on Jira"
    description: "We provide two XRay handlers, that can be activated via ENV variables. If you don't set all of the environment variables, the respective reporting will be skipped."
    shared: "Both providers need XRAY_ENDPOINT and XRAY_TEST_PLAN_KEY to be set. The first pointing to your Jira root URL, the second being the exact id of your test plan, for example TEST-123."
    cloud: "If you are hosting in the cloud XRAY_CLIENT_ID and XRAY_CLIENT_SECRET are also required to make a login possible."
    onpremise: "If you are hosting on premise, provide login data via XRAY_USER_NAME and XRAY_PASSWORD instead."
    limitations: "Ensure the test id in your route id starts with a hash sign, e.g., #TEST-876. Failing to follow this format may result in errors or unrecognised test ids during the XRay processing."
  custom:
    title: "Custom Results"
    description: "You can provide a custom reporter instance as part of your configuration in programmatically accessing the framework. It will be called with the complete result after all result modifiers have modified the result."

usage:
  meta:
    title: "Usage"
    description: "Basic usage information for the framework @idrinth/api-bench"
  title: "Usage"
  binaries:
    title: "Binaries"
    description: "The following binaries are available for use via scripts in your package.json."
  programmatically:
    title: "Programmatically"
    description: "Basically require main/include main and supply the executor method with required parameters. Tasks defined in src/routes directories before, before_task, before_each, main, after_each, after_task, and after will be used to automatically fill the Job processed by the executor. Automatic filling only happens when there are no tasks provided to the function."

logging:
  meta:
    title: "Logging | Usage"
    description: "Information about logging usage and support of the framework @idrinth/api-bench"
  title: "Logging"
  description: "Any logger that either implements the interface or has a wrapper is an option. Wrappers for pino and winston are available."
  used:
    title: "Logging levels used"
    description: "Most log entries are debug level, with the major steps being written to info. Trace is currently not used but may be used for detailed argument printing at some point."
  custom:
    title: "Custom Logger"
    final: "For ease of use, a wrapper is provided as well, that only requires a log method to be implemented."
    description: "You can implement the logger interface below and provide any logger you want to next to the already provided ones."

storage:
  meta:
    title: "Storage | Usage"
    description: "Information about the provided MySQL storage and how to create custom storage implementations for @idrinth/api-bench"
  title:  "Storage"
  description: "Storage classes store each finished set of the run. By default, nothing is stored, but a MySQL storage is provided for those wanting it."
  experimental:
    title: "Experimental"
    description: "We are providing experimental storage support for MSSQL and Postgres starting with 2.8.0. These implementations are not yet well tested."
  custom:
    title: "Custom Storage"
    description: "To provide a custom storage, implement the interface below. The method will be called once per task."

routes:
  meta:
    title: "Routes | Usage"
    description: "Information about how to create test route definitions with the framework @idrinth/api-bench"
  title: "Routes"
  description: "Routes are build as configuration objects, that must be default-exported or provided via module.exports and be in a Javascript file. The object is wrapped in a function to allow environment injection, see below for an example."
  example:
    title: "Example"
    description: "The code below defines a request to a URL from the environment with GET."
    middleware: "To apply middlewares add both the pre and post properties as shown in the example. Then proceed to pass in your middleware functions to be executed."

quick-start:
  meta:
    title: "Quick Start"
    description: "A few steps to quickly get an api-bench project up and running."
  title: "@idrinth/api-bench quick start"
  description: "Starting out with the framework is not difficult. Follow the next couple steps and you will have your first case ready to run in a few minutes."
  step1:
    title: "Requirements"
    description: "Make sure that Node.js in a supported version is installed. That means one of the latest two versions. The latest long term support(lts) version is always recommended."
  step2:
    title: "Setup"
    description: "Run the creation command to create a new benchmark project in a folder within your current working directory:"
    result: "Your project is now set up with the necessary folder structure, ready for further customisation."
  step3:
    title: "Case creation"
    description: "Go into the newly created project and create a new file at src/routes/main/first-test.ts. Fill it with the following example content:"
    result: "This will test, that the URL in main returns a 2xx Status Code and send the user agent with the request."
  step4:
    title: "First run"
    description: "With the following command you can run the example against a public test API to see it in action. Please don't try to create a service denial scenario and keep the thread count low. Creating a service denial scenario could result in the machine or network resource to become unavailable to intended users."
  step5:
    title: "Create a route of your own"
    description: "Create a small route of your own. Most of the work with the framework is route creation, so this will show you how quickly it can be done. Refer to the Usage section for help."
    result: "You now have an idea of how to use iab, go ahead and use it for good!"

loader:
  wait: "Trying to load fresh content for you, please wait."
  offline: "Please go online and then refresh the page."
  reload: "Content has changed, reloading the page for you in a moment."

command:
  or: "or"
  deprecated: "This command is deprecated."
  cli: "Available via the CLI package @idrinth/api-bench-cli and the framework."
  iabr:
    description: "runs the current working directory's project if the routes folder is properly setup"
    arg_1: "Argument 1: threads (default 1)"
    arg_2: "Argument 2: repetitions (default 1)"
    arg_3: "Argument 3: language code (default en)"
    arg_4: "Argument 4: task id, that you want to run only (default all)"
  iabmp:
    description: "creates a new benchmarking project in a directory within the current working directory"
    arg_1: "Argument 1: project name (default: benchmark)"
  iabgfoa:
    description: "generates test skeletons from an OpenApi documentation for a project in the current working directory"
    arg_1: "Argument 1: path to the OpenApi document"
  iabgfh:
    description: "generates test skeletons from an HAR document for a project in the current working directory"
    arg_1: "Argument 1: path to the HAR document"
  iabgfc:
    description: "generates a test skeleton from an CURL command for a project in the current working directory"
    arg_1: "Argument 1: URL to test"
  iabcrd:
    description: "checks all routes for possible issues, so there are no surprises, when actually running the code."
    arg_1: "Argument 1: language(default: en)"
  iabrl:
    description: "runs a load test with the given routes up to a limit of threads. Stops when the limit is reached or an error is found during response validation."
    arg_1: "Argument 1: threads (default 1)"
    arg_2: "Argument 2: repetitions (default 1)"
    arg_3: "Argument 3: language code (default en)"
    arg_4: "Argument 4: thread increment (default 1)"
    arg_5: "Argument 5: maximum threads (default 100)"
  iab:
    description: "This command is going to replace all other commands with a  more sensible interface in 3.0.0 and is available from 2.8.0"
    arg_1: "runs a benchmark with all options being optional."
    arg_2: "runs a content test/integration test with all options being optional."
    arg_3: "runs a route verification with all options being optional."
    arg_4: "runs a load test with all options being optional."
    arg_5: "runs a benchmark with all options being optional."
    arg_6: "runs a stress test for the desired duration in seconds with all options being optional."

cookie-consent:
  title: "We use cookies"
  open: "Settings"
  description: "We use cookies to ensure you get the best experience on our website."
  accept: "Accept"
  decline: "Decline"
  custom: "As above"
  service:
    tracking:
      title: "Matomo tracking"
      description: "We will track your visit via tracking.bjoern-buettner.me to improve out content."
    youtube:
      title: "YouTube"
      description: "We will load videos from www.youtube-nocookie.com to directly play on the site."
    airtime:
      title: "Airtime"
      description: "Participate in a short user survey via airtimeux.com with the response data stored by them."

language-switch:
  aria: "Language switch"

languages:
  en: "English"
  fr: "Français"
  it: "Italiano"
